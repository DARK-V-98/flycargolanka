rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }
    
    function isDeveloper() {
        return isAuthenticated() && request.auth.token.email == 'thimira.vishwa2003@gmail.com';
    }

    function isAdmin() {
      if (!isAuthenticated()) {
        return false;
      }
      if (isDeveloper()) {
          return true;
      }
      // Check if user document exists and has the role
      if (exists(/databases/$(database)/documents/users/$(request.auth.uid))) {
        let userData = getUserData(request.auth.uid).data;
        return userData.role == 'admin';
      }
      return false;
    }

    // --- Collections ---

    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();

      // A user can create their own profile document.
      allow create: if isOwner(userId);

      allow update: if
        // A user can update their own profile, but cannot change their role.
        (isOwner(userId) && request.resource.data.role == resource.data.role) ||
        // An admin (who is not the developer) can update users, but cannot create/promote to developer.
        (isAdmin() && !isDeveloper() && request.resource.data.role != 'developer') ||
        // The developer can update any user's role.
        (isDeveloper());
    }

    match /bookings/{bookingId} {
      allow get: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
      allow list: if isAdmin(); // Users list via query, which is checked by the 'get' rule on each document.

      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

      allow update: if
        // A user can update their own booking ONLY to cancel it, and only if it's 'Pending'.
        (isAuthenticated() && resource.data.userId == request.auth.uid &&
         request.resource.data.status == 'Cancelled' && resource.data.status == 'Pending' &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
        // Admins can update any booking.
        isAdmin();
    }

    match /shipping_rates/{countryId} {
      allow get, list: if true;
      allow write: if isAdmin();

      match /weights/{weightId} {
        allow get, list: if true;
        allow write: if isAdmin();
      }
    }

    match /special_offers/{offerId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }

    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow get, list: if isAuthenticated() &&
                         (resource.data.userId == request.auth.uid ||
                          (resource.data.recipient == 'admins' && isAdmin()));

      allow update: if isAuthenticated() &&
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.isRead == true &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);

      allow create: if isAuthenticated();
    }
  }
}
