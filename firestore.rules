
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Safely get user data only if authenticated.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Check if the currently authenticated user has a specific role.
    function hasRole(role) {
      if (!isAuthenticated()) {
        return false;
      }
      // A user needs to be able to read their own document to determine their role.
      // This is handled by the `get` rule on the users collection.
      let userRole = getUserData(request.auth.uid).role;
      return userRole == role;
    }

    function isAdmin() {
      return hasRole('admin') || hasRole('developer');
    }

    function isDeveloper() {
      return hasRole('developer');
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDeveloperEmail(email) {
      // The developer email needs to be hardcoded for the initial developer account creation.
      return email == "thimira.vishwa2003@gmail.com";
    }

    // --- Users Collection ---
    match /users/{userId} {
      // User can read their own profile, Admins can read any profile.
      allow get: if isOwner(userId) || isAdmin();
      // Only admins can list all users.
      allow list: if isAdmin();
      
      // A new user can create their own document.
      allow create: if isOwner(userId) &&
                       // Ensure the uid in the document matches the auth uid
                       request.resource.data.uid == userId &&
                       // Regular users can only be created with the 'user' role.
                       (request.resource.data.role == 'user' ||
                       // The developer email can be created with the 'developer' role.
                       (request.resource.data.role == 'developer' && isDeveloperEmail(request.auth.token.email)));
                       
      allow update: if
        // A user can update their own profile, but cannot change their role.
        (isOwner(userId) && request.resource.data.role == resource.data.role) ||
        // An Admin (who is not a Developer) can update other users, but cannot promote them to Developer.
        (isAdmin() && !isDeveloper() && userId != request.auth.uid && request.resource.data.role != 'developer') ||
        // A Developer can update any other user's roles.
        (isDeveloper() && userId != request.auth.uid);
    }

    // --- Bookings Collection ---
    match /bookings/{bookingId} {
      allow get: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAuthenticated(); // Secured by where clauses in client queries

      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      allow update: if 
        // User can cancel their own pending booking by only changing status.
        (isAuthenticated() && resource.data.userId == request.auth.uid && request.resource.data.status == 'Cancelled' && resource.data.status == 'Pending' && request.resource.diff(resource).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
        // Admins can update any booking
        isAdmin();
    }
    
    // --- Publicly Readable Data (Admin-managed) ---
    match /shipping_rates/{countryId} {
      allow get, list: if true;
      allow write: if isAdmin();
      
      match /weights/{weightId} {
        allow get, list: if true;
        allow write: if isAdmin();
      }
    }
    
    match /special_offers/{offerId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }

    // --- Settings (Admin only - Not currently used) ---
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }

    // --- Notifications Collection ---
    match /notifications/{notificationId} {
      // User can read their own notifications. Admins can read admin-targeted notifications.
      allow get: if isAuthenticated() && 
                   ((resource.data.userId == request.auth.uid) || 
                    (resource.data.recipient == 'admins' && isAdmin()));
      // List is more dangerous, so we'll be more specific. Client queries must enforce the userId/recipient.
      allow list: if isAuthenticated();
      
      // User can mark their own notification as read.
      allow update: if isAuthenticated() &&
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.isRead == true &&
                       request.resource.diff(resource).affectedKeys().hasOnly(['isRead']);
                       
      // Server-side logic or trusted client logic creates notifications.
      // This rule assumes the client is trusted to set the correct userId.
      allow create: if isAuthenticated();
    }
  }
}
