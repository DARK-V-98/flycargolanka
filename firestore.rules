
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Safely checks if a user's document exists in Firestore.
    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }

    // Safely gets a user's role. Returns 'user' if not found.
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Check for developer role.
    function isDeveloper() {
      return isAuthenticated() && userExists(request.auth.uid) && getRole(request.auth.uid) == 'developer';
    }

    // Check for admin or developer role.
    function isAdmin() {
      return isAuthenticated() && userExists(request.auth.uid) && (getRole(request.auth.uid) == 'admin' || isDeveloper());
    }


    // --- Collections Rules ---

    // Users Collection
    match /users/{userId} {
      // Allow user to create their own document on signup.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      
      // User can read their own profile. Admins/Devs can read any.
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      
      // Complex update logic:
      // 1. A user can update their own profile, but cannot change their own role.
      // 2. An admin can update other users, but cannot promote anyone to developer.
      // 3. A developer can update any other user's roles freely.
      allow update: if (isOwner(userId) && request.resource.data.role == resource.data.role) ||
                       (isAdmin() && !isDeveloper() && request.resource.data.role != 'developer' && userId != request.auth.uid) ||
                       (isDeveloper() && userId != request.auth.uid);
    }

    // Bookings Collection
    match /bookings/{bookingId} {
      // User can read their own bookings. Admins/Devs can read any.
      allow get: if isOwner(resource.data.userId) || isAdmin();
      // List operations are implicitly covered by secure client-side queries with 'get' rule.
      allow list: if isAdmin() || (isAuthenticated() && request.query.userId == request.auth.uid);
      
      // User can create their own booking.
      allow create: if isOwner(request.resource.data.userId);
      
      // User can update THEIR OWN 'Pending' booking to 'Cancelled'.
      // Admins/Devs can update any booking.
      allow update: if (isOwner(resource.data.userId) &&
                          request.resource.data.status == 'Cancelled' &&
                          resource.data.status == 'Pending' &&
                          request.resource.diff(resource).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
                       isAdmin();
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      // User can read their own notifications. Admins/Devs can read admin-targeted ones.
      allow get, list: if (isOwner(resource.data.userId)) ||
                          (resource.data.recipient == 'admins' && isAdmin());
                          
      // Authenticated users can create notifications (validated by server-side logic).
      allow create: if isAuthenticated();
      
      // User can mark THEIR OWN notification as read.
      allow update: if isOwner(resource.data.userId) &&
                       request.resource.data.isRead == true &&
                       request.resource.diff(resource).affectedKeys().hasOnly(['isRead']);
    }
    
    // Public Data (Admin-managed)
    match /shipping_rates/{countryId} {
      allow get, list: if true;
      allow write: if isAdmin();
      
      match /weights/{weightId} {
        allow get, list: if true;
        allow write: if isAdmin();
      }
    }
    
    match /special_offers/{offerId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }
    
    // Homepage Settings (Admin-managed)
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }
  }
}
