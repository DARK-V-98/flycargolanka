
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Safely checks if the currently authenticated user has a specific role.
    function hasRole(role) {
      // Check if user is authenticated and if their user document exists.
      return request.auth != null
             && exists(/databases/$(database)/documents/users/$(request.auth.uid))
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Safely checks if the user is an admin or developer.
    function isAdmin() {
      return request.auth != null
             && exists(/databases/$(database)/documents/users/$(request.auth.uid))
             && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' 
                 || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer');
    }

    function isDeveloper() {
      return hasRole('developer');
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      
      // A user can create their own document upon signing up.
      allow create: if isOwner(userId);
                       
      allow update: if
        // A user can update their own profile, but cannot change their own role.
        (isOwner(userId) && request.resource.data.role == resource.data.role) ||
        // An Admin (who is not a Developer) can update other users' roles, but cannot promote them to Developer.
        (isAdmin() && !isDeveloper() && userId != request.auth.uid && request.resource.data.role != 'developer') ||
        // A Developer can update any other user's roles.
        (isDeveloper() && userId != request.auth.uid);
    }

    // --- Bookings Collection ---
    match /bookings/{bookingId} {
      allow get: if (request.auth != null && resource.data.userId == request.auth.uid) || isAdmin();
      allow list: if isAdmin(); // Users list their own bookings via a secured query.

      // A user can create a booking for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      allow update: if 
        // User can cancel their own pending booking, and only change the status and updatedAt fields.
        (isOwner(resource.data.userId) &&
         resource.data.status == 'Pending' &&
         request.resource.data.status == 'Cancelled' &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
        // Admins can update any booking.
        isAdmin();
    }
    
    // --- Publicly Readable Data (Admin-managed) ---
    match /shipping_rates/{countryId} {
      allow get, list: if true;
      allow write: if isAdmin();
      
      match /weights/{weightId} {
        allow get, list: if true;
        allow write: if isAdmin();
      }
    }
    
    match /special_offers/{offerId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }

    // --- Notifications Collection ---
    match /notifications/{notificationId} {
      allow get: if request.auth != null && 
                  ((resource.data.userId == request.auth.uid) || 
                   (resource.data.recipient == 'admins' && isAdmin()));
      
      allow list: if request.auth != null; // Security enforced by client-side queries

      // Only the intended user can mark their own notification as read.
      allow update: if isOwner(resource.data.userId) &&
                       request.resource.data.isRead == true &&
                       resource.data.isRead == false &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
                       
      // Server-side logic and trusted client logic creates notifications.
      allow create: if request.auth != null;
    }
  }
}
