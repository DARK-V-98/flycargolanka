rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }

    function userRole() {
        if (!isAuthenticated()) {
          return null;
        }
        return getUserData(request.auth.uid).data.role;
    }

    function isAdmin() {
      let role = userRole();
      return isAuthenticated() && (role == 'admin' || role == 'developer');
    }

    function isDeveloper() {
      let role = userRole();
      return isAuthenticated() && role == 'developer';
    }

    function isUpdatingSpecificFields(fields) {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }
    
    // --- Users Collection ---
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      
      allow create: if request.auth.uid == userId &&
                      (request.resource.data.role == 'user' || 
                       (request.resource.data.email == 'thimira.vishwa2003@gmail.com' && request.resource.data.role == 'developer'));
                       
      allow update: if 
        (isOwner(userId) && request.resource.data.role == resource.data.role) ||
        isDeveloper() ||
        (isAdmin() && !isOwner(userId) && request.resource.data.role != 'developer');
    }

    // --- Bookings Collection ---
    match /bookings/{bookingId} {
      allow get: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      
      // A user can list their own bookings (by querying on their userId). Admins can list all bookings.
      allow list: if (isAuthenticated() && request.query.where.userId == request.auth.uid) || isAdmin();

      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      allow update: if 
        // A user can cancel their OWN 'Pending' booking. They can only update 'status' and 'updatedAt'.
        (isAuthenticated() && resource.data.userId == request.auth.uid && 
         request.resource.data.status == 'Cancelled' && resource.data.status == 'Pending' && 
         isUpdatingSpecificFields(['status', 'updatedAt'])) ||
        // Admins can update any booking.
        isAdmin();
    }
    
    // --- Publicly Readable Data ---
    match /shipping_rates/{countryId} {
      allow get, list: if true;
      allow write: if isAdmin();
      
      match /weights/{weightId} {
        allow get, list: if true;
        allow write: if isAdmin();
      }
    }
    
    match /special_offers/{offerId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }
    
    // --- Settings ---
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }

    // --- Notifications Collection ---
    match /notifications/{notificationId} {
      allow get, list: if isAuthenticated() && 
                         ((resource.data.userId == request.auth.uid) || 
                          (resource.data.recipient == 'admins' && isAdmin()));
      
      // Users and Admins can mark their respective notifications as read.
      allow update: if 
                      (isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || (resource.data.recipient == 'admins' && isAdmin())) &&
                       request.resource.data.isRead == true &&
                       isUpdatingSpecificFields(['isRead']));
                       
      allow create: if isAuthenticated();
    }
    
    // Default Deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
