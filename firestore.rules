
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Safely get user data only if authenticated.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Check if the currently authenticated user has a specific role.
    function hasRole(role) {
      if (!isAuthenticated()) {
        return false;
      }
      let userRole = getUserData(request.auth.uid).role;
      return userRole == role;
    }

    function isAdmin() {
      return hasRole('admin') || hasRole('developer');
    }

    function isDeveloper() {
      return hasRole('developer');
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      
      allow create: if isOwner(userId);
                       
      allow update: if
        // A user can update their own profile, but cannot change their role.
        (isOwner(userId) && request.resource.data.role == resource.data.role) ||
        // An Admin (who is not a Developer) can update other users, but cannot promote them to Developer.
        (isAdmin() && !isDeveloper() && userId != request.auth.uid && request.resource.data.role != 'developer') ||
        // A Developer can update any other user's roles.
        (isDeveloper() && userId != request.auth.uid);
    }

    // --- Bookings Collection ---
    match /bookings/{bookingId} {
      allow get: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAuthenticated(); // Secured by where clauses in client queries

      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      allow update: if 
        // User can cancel their own pending booking
        (isAuthenticated() && resource.data.userId == request.auth.uid && request.resource.data.status == 'Cancelled' && resource.data.status == 'Pending') ||
        // Admins can update any booking
        isAdmin();
    }
    
    // --- Publicly Readable Data (Admin-managed) ---
    match /shipping_rates/{countryId} {
      allow get, list: if true;
      allow write: if isAdmin();
      
      match /weights/{weightId} {
        allow get, list: if true;
        allow write: if isAdmin();
      }
    }
    
    match /special_offers/{offerId} {
        allow get, list: if true;
        allow write: if isAdmin();
    }
    
    // --- Settings (Admin only) ---
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }

    // --- Notifications Collection ---
    match /notifications/{notificationId} {
      // User can read their own notifications. Admins can read admin-targeted notifications.
      allow get, list: if isAuthenticated() && 
                         ((resource.data.userId == request.auth.uid) || 
                          (resource.data.recipient == 'admins' && isAdmin()));
      
      // User can mark their own notification as read.
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.isRead == true &&
                       !('message' in request.resource.diff(resource).affectedKeys());
                       
      // Creation is done on behalf of the user by trusted client/server logic.
      allow create: if isAuthenticated();
    }
    
    // Default Deny: This is a fallback to ensure no path is left open.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
