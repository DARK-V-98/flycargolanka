
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin() {
      // Check if the user document exists and has the role 'admin' or 'developer'.
      return isAuth() && (
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer'
        )
      );
    }
    
    function isDeveloper() {
       return isAuth() && (
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer'
       );
    }
    
    // USERS collection
    match /users/{userId} {
      // A user can read their own profile.
      // An admin/developer can read any user profile.
      allow read: if isOwner(userId) || isAdmin();

      // A user can create their own profile upon signing up.
      // `request.resource.data` refers to the data being written.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      
      // A user can update their own profile fields.
      // An admin/developer can update any user's role.
      allow update: if 
        (isOwner(userId) && request.resource.data.role == resource.data.role) || // User can update own profile, but not their role
        (isAdmin() && request.resource.data.uid == resource.data.uid); // Admin can update any profile, including role.
        
      // No one can delete user profiles directly.
      allow delete: if false;
    }

    // BOOKINGS collection
    match /bookings/{bookingId} {
        // A user can create their own booking.
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        
        // A user can read their own bookings.
        // Admins can read any booking.
        allow read: if (isAuth() && resource.data.userId == request.auth.uid) || isAdmin();

        // A user can update their own booking only to cancel it if it's 'Pending'.
        // Admins can update any booking.
        allow update: if 
          (isAuth() && resource.data.userId == request.auth.uid && request.resource.data.status == 'Cancelled' && resource.data.status == 'Pending') ||
          isAdmin();

        // No one can delete bookings.
        allow delete: if false;
    }
    
    // SETTINGS collection (e.g., homepage image)
    match /settings/{settingId} {
      // Anyone can read settings (e.g., to display homepage image).
      allow read: if true;
      // Only admins/devs can write/update settings.
      allow write: if isAdmin();
    }
    
    // SPECIAL OFFERS collection
    match /special_offers/{offerId} {
      // Anyone can read offers.
      allow read: if true;
      // Only admins/devs can manage offers.
      allow write: if isAdmin();
    }

    // SHIPPING RATES collection
    match /shipping_rates/{countryId} {
      // Anyone can read shipping rates.
      allow read: if true;
      // Only admins/devs can manage rates.
      allow write: if isAdmin();

      // Subcollection for weights
      match /weights/{weightId} {
        // Anyone can read weights.
        allow read: if true;
        // Only admins/devs can manage weights.
        allow write: if isAdmin();
      }
    }
    
    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
      // Notifications are created by server-side logic or trusted client logic.
      allow create: if isAuth();

      // A user can read their own notifications.
      // An admin can read admin notifications.
      allow read: if
        (isAuth() && resource.data.userId == request.auth.uid) ||
        (isAdmin() && resource.data.recipient == 'admins');
      
      // A user can delete their own notifications.
      // An admin can delete admin notifications.
      allow delete: if
        (isAuth() && resource.data.userId == request.auth.uid) ||
        (isAdmin() && resource.data.recipient == 'admins');
      
      // Notifications are not updatable.
      allow update: if false;
    }
  }
}
