
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    // These functions now safely handle cases where request.auth is null.
    function isDeveloper(userId) {
      let email = get(/databases/$(database)/documents/users/$(userId)).data.email;
      return request.auth != null && email == "thimira.vishwa2003@gmail.com";
    }

    function isAdmin(userId) {
      let role = get(/databases/$(database)/documents/users/$(userId)).data.role;
      return request.auth != null && role == 'admin';
    }

    // Users can read their own profile, and update specific fields.
    // They can only be created with a 'user' role unless by an admin/dev.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid) || isDeveloper(request.auth.uid));
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid) || isDeveloper(request.auth.uid));
    }

    // Bookings can be created by any authenticated user.
    // Users can only view their own bookings.
    // Admins/Developers can view all bookings and update their status.
    match /bookings/{bookingId} {
      allow read: if request.auth != null && (get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId == request.auth.uid || isAdmin(request.auth.uid) || isDeveloper(request.auth.uid));
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
                      (getAfter(/databases/$(database)/documents/bookings/$(bookingId)).data.userId == request.auth.uid && request.resource.data.status == 'Cancelled') ||
                      isAdmin(request.auth.uid) || 
                      isDeveloper(request.auth.uid)
                    );
    }
    
    // Shipping rates can be read by anyone (for the calculator).
    // Only admins/developers can create, update, or delete them.
    match /shipping_rates/{countryId} {
      allow read: if true;
      allow write: if request.auth != null && (isAdmin(request.auth.uid) || isDeveloper(request.auth.uid));

      match /weights/{weightId} {
        allow read: if true;
        allow write: if request.auth != null && (isAdmin(request.auth.uid) || isDeveloper(request.auth.uid));
      }
    }
    
    // Notifications are only readable and writable by admins/developers.
    match /notifications/{notificationId} {
        allow read, write: if request.auth != null && (isAdmin(request.auth.uid) || isDeveloper(request.auth.uid));
    }

    // Special Offers can be read by anyone, but only managed by admins/devs.
    match /special_offers/{offerId} {
      allow read: if true;
      allow write: if request.auth != null && (isAdmin(request.auth.uid) || isDeveloper(request.auth.uid));
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
