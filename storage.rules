
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the requesting user is an admin or developer
    function hasAdminRole() {
      // get() can read from Firestore. It needs the full path.
      // We check if the user's role in the 'users' collection is 'admin' or 'developer'.
      return request.auth != null && get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin', 'developer'];
    }

    // Rules for NIC verification images
    match /nic_verification/{userId}/{fileName} {
      // Allow authenticated users to write to their own folder
      allow write: if request.auth != null && request.auth.uid == userId
                    && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                    && request.resource.contentType.matches('image/.*'); // Only images

      // An authenticated user can read their own files.
      // An admin/developer can read anyone's files.
      allow read: if request.auth != null && (request.auth.uid == userId || hasAdminRole());
    }

    // Rules for homepage images
    match /homepage/{fileName} {
        // Anyone can read the homepage images
        allow read: if true;
        // Only admins/developers can upload/change homepage images
        allow write: if request.auth != null && hasAdminRole();
    }
  }
}
