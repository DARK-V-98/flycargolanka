
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // --- Helper Functions ---
    // These functions read from Firestore to check a user's role.
    function getUserData(userId) {
      if (userId == null || userId == "") {
        return null;
      }
      return get(/databases/(default)/documents/users/$(userId)).data;
    }

    function getUserRole(userId) {
      let userData = getUserData(userId);
      if (userData == null || !('role' in userData)) {
        return 'user'; // Default to 'user' if not found
      }
      return userData.role;
    }

    function isAdmin() {
      // Check if the user is logged in
      if (request.auth == null) {
        return false;
      }
      // Get the user's role from Firestore
      let role = getUserRole(request.auth.uid);
      return role == 'admin' || role == 'developer';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- Rules for NIC Verification Images ---
    // Path: /nic_verification/{userId}/{fileName}
    match /nic_verification/{userId}/{imageId} {
      
      // Allow read access to the user who owns the files and to admins/developers.
      allow read: if isOwner(userId) || isAdmin();
      
      // Allow the user to upload their own NIC images.
      // We also check file size and type.
      allow write: if isOwner(userId) &&
                      request.resource.size < 5 * 1024 * 1024 && // Max 5MB
                      request.resource.contentType.matches('image/.*'); // Only allow images
                      
      // Allow owner to delete their files (e.g., for resubmission)
      allow delete: if isOwner(userId);
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
